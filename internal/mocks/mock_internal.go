// Code generated by MockGen. DO NOT EDIT.
// Source: internal.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v28/github"
	reflect "reflect"
)

// MockGithubPullRequestsService is a mock of GithubPullRequestsService interface
type MockGithubPullRequestsService struct {
	ctrl     *gomock.Controller
	recorder *MockGithubPullRequestsServiceMockRecorder
}

// MockGithubPullRequestsServiceMockRecorder is the mock recorder for MockGithubPullRequestsService
type MockGithubPullRequestsServiceMockRecorder struct {
	mock *MockGithubPullRequestsService
}

// NewMockGithubPullRequestsService creates a new mock instance
func NewMockGithubPullRequestsService(ctrl *gomock.Controller) *MockGithubPullRequestsService {
	mock := &MockGithubPullRequestsService{ctrl: ctrl}
	mock.recorder = &MockGithubPullRequestsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubPullRequestsService) EXPECT() *MockGithubPullRequestsServiceMockRecorder {
	return m.recorder
}

// ListPullRequestsWithCommit mocks base method
func (m *MockGithubPullRequestsService) ListPullRequestsWithCommit(ctx context.Context, owner, repo, sha string, opt *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestsWithCommit", ctx, owner, repo, sha, opt)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPullRequestsWithCommit indicates an expected call of ListPullRequestsWithCommit
func (mr *MockGithubPullRequestsServiceMockRecorder) ListPullRequestsWithCommit(ctx, owner, repo, sha, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestsWithCommit", reflect.TypeOf((*MockGithubPullRequestsService)(nil).ListPullRequestsWithCommit), ctx, owner, repo, sha, opt)
}

// MockGithubRepositoriesService is a mock of GithubRepositoriesService interface
type MockGithubRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockGithubRepositoriesServiceMockRecorder
}

// MockGithubRepositoriesServiceMockRecorder is the mock recorder for MockGithubRepositoriesService
type MockGithubRepositoriesServiceMockRecorder struct {
	mock *MockGithubRepositoriesService
}

// NewMockGithubRepositoriesService creates a new mock instance
func NewMockGithubRepositoriesService(ctrl *gomock.Controller) *MockGithubRepositoriesService {
	mock := &MockGithubRepositoriesService{ctrl: ctrl}
	mock.recorder = &MockGithubRepositoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubRepositoriesService) EXPECT() *MockGithubRepositoriesServiceMockRecorder {
	return m.recorder
}

// ListCommits mocks base method
func (m *MockGithubRepositoriesService) ListCommits(ctx context.Context, owner, repo string, opt *github.CommitsListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, owner, repo, opt)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCommits indicates an expected call of ListCommits
func (mr *MockGithubRepositoriesServiceMockRecorder) ListCommits(ctx, owner, repo, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGithubRepositoriesService)(nil).ListCommits), ctx, owner, repo, opt)
}

// GetCommitSHA1 mocks base method
func (m *MockGithubRepositoriesService) GetCommitSHA1(ctx context.Context, owner, repo, ref, lastSHA string) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitSHA1", ctx, owner, repo, ref, lastSHA)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitSHA1 indicates an expected call of GetCommitSHA1
func (mr *MockGithubRepositoriesServiceMockRecorder) GetCommitSHA1(ctx, owner, repo, ref, lastSHA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitSHA1", reflect.TypeOf((*MockGithubRepositoriesService)(nil).GetCommitSHA1), ctx, owner, repo, ref, lastSHA)
}

// CompareCommits mocks base method
func (m *MockGithubRepositoriesService) CompareCommits(ctx context.Context, owner, repo, base, head string) (*github.CommitsComparison, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommits", ctx, owner, repo, base, head)
	ret0, _ := ret[0].(*github.CommitsComparison)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompareCommits indicates an expected call of CompareCommits
func (mr *MockGithubRepositoriesServiceMockRecorder) CompareCommits(ctx, owner, repo, base, head interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommits", reflect.TypeOf((*MockGithubRepositoriesService)(nil).CompareCommits), ctx, owner, repo, base, head)
}

// GetLatestRelease mocks base method
func (m *MockGithubRepositoriesService) GetLatestRelease(ctx context.Context, owner, repo string) (*github.RepositoryRelease, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease", ctx, owner, repo)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease
func (mr *MockGithubRepositoriesServiceMockRecorder) GetLatestRelease(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockGithubRepositoriesService)(nil).GetLatestRelease), ctx, owner, repo)
}
